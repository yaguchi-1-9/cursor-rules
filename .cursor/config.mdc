---
description: 
globs: 
alwaysApply: true
---
# Cursor Configuration
Description: Cursorの設定ファイル

# ワークフロー設定
## 1. 実装案生成 (plan)
### 説明
実装案を３つ生成し、メリデメ＋おすすめを提示する

### 設定
```yaml
workflow:
  name: plan
  description: 実装案を３つ生成し、メリデメ＋おすすめを提示する
  rules: 
    - .cursor/rules/project_rules.mdc
    - .cursor/rules/plan.mdc
    - .cursor/rules/architecture.mdc
    - .cursor/rules/php.mdc
    - .cursor/rules/docker.mdc
  inputs:
    - name: inputFile
      type: file
      description: 要件を記述したYAML/JSONファイルを選択してください
    - name: currentVersion
      type: string
      description: package.jsonから取得した現在のバージョン
      default: ${package.json.version}
```

### 実行手順
1. 要件の分析
   - 機能要件の整理
     - 必須機能
     - オプション機能
     - 将来の拡張性
   - 非機能要件の整理
     - パフォーマンス要件
     - セキュリティ要件
     - スケーラビリティ要件
   - 制約条件の確認
     - 技術的制約
     - ビジネス制約
     - リソース制約
   - 優先度の考慮
     - ビジネス価値
     - 技術的複雑さ
     - リスク要因

2. 全体設計
   - アーキテクチャ設計
     - システム構成図
     - コンポーネント図
     - デプロイメント図
   - データベース設計
     - ER図
     - テーブル定義
     - インデックス戦略
   - API設計
     - エンドポイント設計
     - リクエスト/レスポンス形式
     - 認証・認可設計
   - セキュリティ設計
     - 認証方式
     - データ保護
     - アクセス制御
   - パフォーマンス設計
     - キャッシュ戦略
     - スケーリング戦略
     - 負荷分散

3. 実装案の提示（表形式）
   - 案1: シンプルな実装
     - 最小限の機能実装
     - 基本的なアーキテクチャ
     - 短期的な開発期間
   - 案2: 拡張性を重視した実装
     - モジュール化された設計
     - 柔軟なアーキテクチャ
     - 中期的な開発期間
   - 案3: 将来性を考慮した実装
     - 高度な機能実装
     - スケーラブルなアーキテクチャ
     - 長期的な開発期間

4. 各案の評価
   - 工数（小・中・大）
     - 開発期間
     - 必要なリソース
     - コスト見積もり
   - 拡張性（高・中・低）
     - 機能追加の容易さ
     - スケーラビリティ
     - 保守性
   - 保守性（高・中・低）
     - コードの可読性
     - テスト容易性
     - デバッグ容易性
   - 具体的なメリット・デメリット
     - 技術的観点
     - ビジネス観点
     - 運用観点
   - リスク評価
     - 技術的リスク
     - ビジネスリスク
     - 運用リスク
   - 技術的負債の見積もり
     - 短期的な負債
     - 長期的な負債
     - 対策コスト

5. おすすめ案の提示
   - 選択理由
     - 技術的妥当性
     - ビジネス適合性
     - リスク評価
   - 実装概要
     - アーキテクチャ概要
     - 主要コンポーネント
     - 開発フェーズ
   - 想定される課題
     - 技術的課題
     - ビジネス課題
     - 運用課題
   - リスク対策
     - 予防策
     - 対応策
     - モニタリング
   - 代替案の検討
     - フォールバック案
     - 段階的実装
     - 移行戦略

## 2. タスク分解 (breakdown)
### 説明
選択案を受けてタスク分解する

### 設定
```yaml
workflow:
  name: breakdown
  description: 選択案を受けてタスク分解する
  rules: 
    - .cursor/rules/project_rules.mdc
    - .cursor/rules/breakdown.mdc
    - .cursor/rules/architecture.mdc
    - .cursor/rules/php.mdc
    - .cursor/rules/docker.mdc
  dependencies:
    - previous: lastResponse
    - name: currentVersion
      type: string
      description: package.jsonから取得した現在のバージョン
      default: ${package.json.version}
```

### 実行手順
1. プロジェクト構造
   - ディレクトリ構成
   - ファイル命名規則
   - コーディング規約
   - バージョン管理方針
   - デプロイメント戦略

2. データベース設計
   - テーブル定義
   - インデックス設計
   - マイグレーション計画
   - バックアップ戦略
   - パフォーマンス考慮事項

3. アプリケーション設計
   - クラス図
   - シーケンス図
   - ユースケース図
   - アーキテクチャパターン
   - セキュリティ設計

4. 実装タスク
   - 優先順位付け
   - 依存関係の整理
   - 工数見積もり
   - リソース配分
   - マイルストーン設定

5. テスト計画
   - テスト項目
   - テストデータ
   - テスト環境
   - 自動化戦略
   - 品質基準

## 3. 設計フェーズ (design)
### 説明
タスク分解を受けて、詳細な設計を行う

### 設定
```yaml
workflow:
  name: design
  description: タスク分解を受けて、詳細な設計を行う
  rules: 
    - .cursor/rules/project_rules.mdc
    - .cursor/rules/design.mdc
    - .cursor/rules/architecture.mdc
    - .cursor/rules/php.mdc
    - .cursor/rules/docker.mdc
  dependencies:
    - previous: lastResponse
  inputs:
    - name: currentVersion
      type: string
      description: package.jsonから取得した現在のバージョン
      default: ${package.json.version}
```

### 実行手順
1. データベース設計
   - テーブル定義
     - テーブル名と説明
     - カラム定義（名前、型、制約）
     - インデックス設計
     - 外部キー制約
   - マイグレーション計画
     - マイグレーションファイルの作成
     - ロールバック手順
   - パフォーマンス考慮事項
     - インデックス戦略
     - パーティショニング
     - アーカイブ戦略

2. クラス設計
   - ドメインモデル
     - エンティティの定義
     - 値オブジェクトの定義
     - ドメインサービスの定義
   - ユースケース
     - インターフェースの定義
     - 実装クラスの設計
     - 依存関係の整理
   - リポジトリ
     - インターフェースの定義
     - 実装クラスの設計
     - クエリの最適化

3. API設計
   - エンドポイント定義
     - パス設計
     - HTTPメソッド
     - リクエスト/レスポンス形式
   - 認証・認可
     - 認証方式
     - 権限設計
     - トークン管理
   - エラーハンドリング
     - エラーコード
     - エラーメッセージ
     - リトライ戦略

4. フロントエンド設計
   - コンポーネント設計
     - コンポーネントの分割
     - 状態管理
     - イベントハンドリング
   - スタイル設計
     - デザインシステム
     - レスポンシブ対応
     - アクセシビリティ
   - パフォーマンス最適化
     - レンダリング最適化
     - アセット最適化
     - キャッシュ戦略

5. テスト設計
   - テストケース設計
     - ユニットテスト
     - 統合テスト
     - E2Eテスト
   - テストデータ設計
     - テストデータの準備
     - モックデータの設計
     - フィクスチャの設計
   - テスト環境設計
     - 環境構築
     - 設定管理
     - データベース設定

## 4. コード変更生成 (apply)
### 説明
指定ステップを実行し、ファイル変更を生成する

### 設定
```yaml
workflow:
  name: apply
  description: 指定ステップを実行し、ファイル変更を生成する
  rules: 
    - .cursor/rules/project_rules.mdc
    - .cursor/rules/apply.mdc
    - .cursor/rules/architecture.mdc
    - .cursor/rules/php.mdc
    - .cursor/rules/docker.mdc
  dependencies:
    - previous: lastResponse
```

### 実行手順
1. 変更内容の確認
   - 変更対象ファイルの特定
   - 既存コードの分析
   - 変更範囲の決定
   - 影響範囲の評価
   - リグレッションテストの確認
   - バージョン番号の確認と更新

2. コード生成
   - 新規ファイルの作成
   - 既存ファイルの修正
   - テストコードの追加
   - ドキュメントの更新
   - コメントの追加
   - package.jsonのバージョン更新

3. 品質チェック
   - コーディング規約の遵守
   - エラーハンドリングの実装
   - セキュリティ対策の実装
   - パフォーマンス最適化
   - ユニットテストの実行

4. レビューと改善
   - コードレビューの実施
   - フィードバックの反映
   - リファクタリング
   - ドキュメントの更新
   - 変更履歴の記録

## 5. コードレビュー (review)
### 説明
生成されたコードをレビューし、品質評価と改善提案を行う

### 設定
```yaml
workflow:
  name: review
  description: 生成されたコードをレビューし、品質評価と改善提案を行う
  rules: 
    - .cursor/rules/project_rules.mdc
    - .cursor/rules/review.mdc
    - .cursor/rules/architecture.mdc
    - .cursor/rules/php.mdc
    - .cursor/rules/docker.mdc
  dependencies:
    - previous: lastResponse
  inputs:
    - name: reviewType
      type: select
      options: [コードレビュー, ペアプログラミング, 自己レビュー]
      description: レビュー方法を選択してください
    - name: currentVersion
      type: string
      description: package.jsonから取得した現在のバージョン
      default: ${package.json.version}
```

### 実行手順
1. コード品質評価
   - 静的解析
     - PHPStanによる型チェック
     - PHP_CodeSnifferによるコーディング規約チェック
     - 複雑度の測定
     - 重複コードの検出
   - テストカバレッジ
     - ユニットテストのカバレッジ
     - 統合テストのカバレッジ
     - E2Eテストのカバレッジ
   - パフォーマンス
     - クエリの最適化
     - メモリ使用量
     - レスポンスタイム

2. アーキテクチャ評価
   - 設計原則の遵守
     - SOLID原則
     - DRY原則
     - KISS原則
   - 依存関係
     - 循環依存の有無
     - 適切な抽象化
     - インターフェースの使用
   - 拡張性
     - 新機能追加の容易さ
     - 変更の影響範囲
     - モジュール性

3. セキュリティ評価
   - 脆弱性チェック
     - SQLインジェクション
     - XSS
     - CSRF
     - 認証・認可
   - データ保護
     - 機密情報の取り扱い
     - データの暗号化
     - アクセス制御
   - エラーハンドリング
     - 例外処理
     - ログ管理
     - エラーメッセージ

4. ドキュメント評価
   - コードコメント
     - PHPDocの記述
     - 複雑なロジックの説明
     - TODOコメント
   - APIドキュメント
     - エンドポイントの説明
     - リクエスト/レスポンス形式
     - エラーコード
   - 技術文書
     - アーキテクチャ図
     - シーケンス図
     - データベース設計書

5. 改善提案
   - 必須修正（MUST）
     - セキュリティ上の問題
     - 重大なバグ
     - パフォーマンスの問題
   - 推奨修正（SHOULD）
     - コードの可読性
     - 保守性の向上
     - テストの追加
   - 任意修正（MAY）
     - リファクタリング
     - ドキュメントの改善
     - 最適化

6. スコアリング
   - 評価項目
     - コード品質: 30点
     - アーキテクチャ: 25点
     - セキュリティ: 20点
     - ドキュメント: 15点
     - テスト: 10点
   - 評価基準
     - 90点以上: 優
     - 80点以上: 良
     - 70点以上: 可
     - 70点未満: 不可
   - 改善目標
     - 各項目の最低点設定
     - 優先度の高い項目の重点評価
     - 継続的な改善計画

# 注意事項
- 各ワークフローは順番に実行する必要があります
- 入力ファイルは適切な形式で準備してください
- ステップ番号は1から始まる連番で指定してください
- 各フェーズでの成果物は必ずバージョン管理してください
- 定期的な進捗報告とステータス更新を行ってください
- バージョン番号はセマンティックバージョニングに従って更新してください
- package.jsonのバージョン更新は、変更の影響度に応じて適切に行ってください
- クリーンアーキテクチャの原則に従って実装してください
- セキュリティ対策を常に意識してください
- パフォーマンス最適化を考慮してください
- データベースの変更は常に新しいマイグレーションファイルを作成して行ってください