---
description: 
globs: 
alwaysApply: true
---
Rule Name: breakdown
Description: タスク分解に関するルール

# ルールの詳細
- タスクは段階的に分解すること
- 各タスクに優先順位を付けること
- 依存関係を明確にすること
- 必要なアウトプット（DB設計、UML等）を明記すること
- 各タスクの工数見積もりをすること
- リスク要因を特定すること
- テスト項目を洗い出すこと

# 使用例
```yaml
タスク分解:
  - フェーズ1: 設計
    優先順位: 高
    依存関係: なし
    工数: 3日
    アウトプット:
      - データベース設計書
      - クラス図
      - API仕様書
    リスク:
      - 要件の不明確さ
    テスト項目:
      - 設計レビュー
  - フェーズ2: 実装
    優先順位: 中
    依存関係: フェーズ1
    工数: 5日
    アウトプット:
      - ソースコード
      - 単体テスト
    リスク:
      - 技術的な課題
    テスト項目:
      - 単体テスト
      - コードレビュー
```

# 注意事項
- タスクの粒度は適切に調整すること
- 依存関係は循環しないように注意すること
- リスク要因は具体的な対策とセットで記述すること
- テスト項目は網羅的に洗い出すこと
