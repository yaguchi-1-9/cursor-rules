---
description: 
globs: 
alwaysApply: true
---
# プロジェクトルール

## 1. プロジェクト基本情報

### 技術スタック
#### バックエンド
- PHP
- Laravel
- MySQL
- MongoDB

#### フロントエンド
- Blade（テンプレートエンジン）
- JavaScript
- React

#### インフラストラクチャ
- Docker（開発環境）

#### 開発ツール
- Composer（PHP依存関係管理）
- Git（バージョン管理）
- PHPUnit（テストフレームワーク）

### 認証システム

### ルーティング
- WebルートとAPIルートの分離

### 主要機能

## 2. アーキテクチャルール

### ディレクトリ構造
```
app/
├── Domain/          # ドメインモデルとビジネスロジック
├── UseCase/         # ユースケースの実装
├── Controller/      # コントローラー層
├── View/            # ビュー層
├── DataAccess/      # データアクセス層
├── Infrastructure/  # インフラストラクチャ層
└── Providers/       # サービスプロバイダー
```

### 依存関係の方向
- 依存性逆転の原則（DIP）に従い、依存関係は外側から内側に向かいます
- 内側の層は外側の層に依存してはいけません
- データベースアクセスは必ずRepositoryInterfaceを通して行います

## 3. PHPコーディングルール

### データベース操作
- Eloquent ORMの使用禁止
- クエリビルダの使用義務
- Repositoryパターンの実装必須

### 命名規則
- クラス名
  - キャメルケース（PascalCase）
  - 名詞を使用
  - 接尾辞の規則
    - コントローラー: `{機能名}Controller`
    - リポジトリ: `{エンティティ名}Repository`
    - サービス: `{機能名}Service`
    - モデル: `{エンティティ名}`
    - インターフェース: `{機能名}Interface`
    - トレイト: `{機能名}Trait`
    - 例外: `{機能名}Exception`

- メソッド名
  - キャメルケース（camelCase）
  - 動詞から始める
  - 命名パターン
    - 取得系: `get{対象}`, `find{対象}`, `fetch{対象}`
    - 作成系: `create{対象}`, `make{対象}`
    - 更新系: `update{対象}`, `modify{対象}`
    - 削除系: `delete{対象}`, `remove{対象}`
    - 検証系: `validate{対象}`, `check{対象}`
    - 変換系: `convert{対象}`, `transform{対象}`

- 変数名
  - キャメルケース（camelCase）
  - 名詞を使用
  - 配列は複数形
  - 真偽値は`is`, `has`, `can`などで始める
  - 定数は大文字のスネークケース

- データベース
  - テーブル名: スネークケース、複数形
  - カラム名: スネークケース
  - 外部キー: `{テーブル名}_id`
  - インデックス: `index_{テーブル名}_{カラム名}`
  - ユニーク制約: `unique_{テーブル名}_{カラム名}`
  - 外部キー制約: `foreign_key_{テーブル名}_{参照テーブル名}`

- ファイル名
  - クラスファイル: クラス名と同じ
  - ビューファイル: スネークケース
  - 設定ファイル: スネークケース
  - テストファイル: `{テスト対象}Test`

- ディレクトリ名
  - スネークケース
  - 機能単位で分割
  - 複数形を使用

### 例外処理
- データベース操作は必ずtry-catchで例外処理
- エラーメッセージは適切にログに記録
- データベースエラーは適切にハンドリング
- カスタム例外クラスの使用
- 例外の粒度
  - ビジネスロジックの例外は具体的なメッセージを含める
  - 技術的な例外は一般的なメッセージを使用
- ログレベル
  - ERROR: システムエラー、データベースエラー
  - WARNING: ビジネスロジックの警告
  - INFO: 重要な操作の記録
  - DEBUG: 開発時のデバッグ情報

## 4. セキュリティ対策
- パスワードのハッシュ化
  - 適切なコスト設定
  - パスワードポリシーの実装
- CSRF保護
  - トークンの生成と検証
  - セッション管理
  - 二重送信防止
- XSS対策
  - 入力値のエスケープ
  - Content Security Policyの設定
  - サニタイズ処理
- 入力値のバリデーション
  - 型チェック
  - 範囲チェック
  - フォーマットチェック
  - カスタムバリデーションルール
- SQLインジェクション対策
  - プリペアドステートメントの使用
  - パラメータバインディング
  - エスケープ処理
- セッション管理
  - セッションタイムアウト
  - セッション固定攻撃対策
  - セッションハイジャック対策
- アクセス制御
  - ロールベースのアクセス制御
  - リソースベースのアクセス制御
  - 権限の最小化
- ログ管理
  - セキュリティイベントの記録
  - 監査ログの保持
  - ログの暗号化
- エラーハンドリング
  - 詳細なエラーメッセージの非表示
  - 適切なエラーページの表示
  - エラーログの管理

## 5. パフォーマンス最適化
- クエリの最適化
  - N+1問題の回避
  - インデックスの適切な使用
  - 必要なカラムのみの取得
  - クエリの実行計画の確認
- キャッシュ戦略
  - ページキャッシュ: 静的コンテンツ
  - データキャッシュ: 頻繁にアクセスされるデータ
  - クエリキャッシュ: 複雑なクエリ結果
  - キャッシュの有効期限設定
- アセットの最適化
  - 画像の最適化（WebP形式の使用）
  - CSS/JSの圧縮
  - 遅延読み込みの実装
  - CDNの活用
- レスポンスタイム目標
  - 通常のページ表示: 200ms以下
  - APIレスポンス: 100ms以下
  - バッチ処理: 1件あたり50ms以下
- メモリ使用量の最適化
  - 大きなデータセットの分割処理
  - 不要なオブジェクトの即時解放
  - メモリリークの防止

## 6. テスト戦略
- ユニットテスト
  - テストカバレッジ目標: 80%以上
  - ドメインロジックの完全なカバレッジ
  - モックとスタブの適切な使用
  - テストケースの命名規則: `test_<テスト対象>_<期待する結果>`
  - テストメソッドの命名規則: `test<テスト対象のメソッド名>`
- 統合テスト
  - データベース操作のテスト
  - 外部サービスとの連携テスト
  - トランザクションのテスト
  - エラーケースのテスト
- E2Eテスト
  - 主要なユーザーフロー
  - エラー時の動作確認
  - ブラウザ互換性テスト
  - レスポンシブデザインのテスト
- CI/CDによる自動テスト
  - プルリクエスト時の自動テスト
  - デプロイ前の自動テスト
  - テスト結果の可視化
  - テスト失敗時の通知
- コード品質チェック
  - 複雑度の制限（循環的複雑度10以下）
  - 重複コードの検出
- テストデータ管理
  - テスト用のシードデータ
  - テスト用の環境変数
  - テスト用のモックデータ
  - テストデータのバージョン管理

## 7. ドキュメンテーションルール
- APIドキュメント
  - OpenAPI/Swagger形式での記述
  - エンドポイントの説明
  - リクエスト/レスポンスの形式
  - エラーコードの定義
  - 認証要件の明記
  - バージョン情報の記載

- コードコメント
  - PHPDoc形式での記述
  - クラス、メソッド、プロパティの説明
  - パラメータと戻り値の型情報
  - 例外の説明
  - 複雑なロジックの説明

- 変更履歴
  - セマンティックバージョニングの遵守
  - CHANGELOG.mdの更新
  - 破壊的変更の明記
  - 新機能の説明
  - バグ修正の説明
  - セキュリティ修正の説明

- 技術文書
  - アーキテクチャ図の管理
  - データベース設計書
  - デプロイメント手順書
  - トラブルシューティングガイド
  - 開発環境構築手順
  - 運用マニュアル

- ドキュメント管理
  - バージョン管理
  - レビュープロセス
  - 更新頻度の定義
  - アクセス権限の管理
  - バックアップ戦略
  - 多言語対応

## 8. デプロイメントルール
- デプロイメントプロセス
  - 環境ごとの設定管理
    - 開発環境（dev）
    - 本番環境（prod）
  - デプロイメントフロー
    - コードレビュー完了
    - テストの成功
    - ステージング環境での検証
    - 本番環境へのデプロイ

- ロールバック手順
  - ロールバックトリガー
    - 重大なバグの発生
    - パフォーマンスの著しい低下
    - セキュリティインシデント
  - ロールバックプロセス
    - バックアップからの復元
    - データベースのロールバック
    - 設定の復元
  - ロールバック後の対応
    - 原因の調査
    - 再デプロイ計画
    - インシデントレポート

- 環境変数の管理
  - 環境変数の種類
    - アプリケーション設定
    - データベース接続情報
    - APIキー
    - 外部サービス設定
  - 管理方法
    - .envファイルの使用
    - 環境ごとの設定ファイル
    - 暗号化された設定値
  - アクセス制御
    - 権限管理
    - 変更履歴の記録
    - 定期的な見直し

## 9. コードレビュープロセス
- レビュー基準
  - コード品質
    - 可読性
    - 保守性
    - パフォーマンス
    - セキュリティ
  - アーキテクチャ
    - 設計原則の遵守
    - 依存関係の適切性
    - 拡張性
  - テスト
    - テストカバレッジ
    - テストの品質
    - エッジケースの考慮

- レビューチェックリスト
  - 機能要件
    - 要件の完全な実装
    - エッジケースの処理
    - エラーハンドリング
  - コードスタイル
    - 命名規則の遵守
    - コーディング規約の遵守
    - コメントの適切性
  - セキュリティ
    - 入力値の検証
    - 認証・認可の確認
    - 機密情報の保護
  - パフォーマンス
    - クエリの最適化
    - メモリ使用量
    - レスポンスタイム

- レビューコメントの規約
  - コメントの種類
    - 必須修正（bugfix,refactor）
    - 推奨修正（IMO）
    - 任意修正（FYI）
    - 良い点（good）
  - コメントの形式
    - 具体的な指摘
    - 改善案の提示
    - 参考情報の提供

- レビュープロセスの自動化
  - 静的解析
    - Linter
  - テスト自動化
    - ユニットテスト
    - 統合テスト
    - E2Eテスト
  - コード品質チェック
    - 複雑度の測定
    - 重複コードの検出
    - カバレッジの確認
  - 自動レビュー
    - プルリクエストテンプレート
