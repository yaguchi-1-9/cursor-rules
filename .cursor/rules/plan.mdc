---
description: 
globs: 
alwaysApply: true
---
Rule Name: plan
Description: 実装案の生成に関するルール

# ルールの詳細
- 実装案は必ず3つ提示すること
- 各案のメリット・デメリットは具体的に記述すること
- 工数は「小」「中」「大」の3段階で評価すること
- 拡張性と保守性は「高」「中」「低」の3段階で評価すること
- 表形式で出力すること
- おすすめ案とその理由を明確に示すこと
- 各案の実装概要を簡潔に説明すること

# 使用例
```yaml
実装案:
  - 案1: シンプルな実装
    工数: 小
    拡張性: 低
    保守性: 中
    メリット: 実装が簡単
    デメリット: 機能追加が困難
  - 案2: 拡張性を重視した実装
    工数: 中
    拡張性: 高
    保守性: 高
    メリット: 将来の機能追加が容易
    デメリット: 初期実装コストが高い
  - 案3: 将来性を考慮した実装
    工数: 大
    拡張性: 高
    保守性: 高
    メリット: 長期的な運用が容易
    デメリット: 開発期間が長い
```

# 注意事項
- 各案の評価は客観的な根拠に基づいて行うこと
- おすすめ案はプロジェクトの要件に応じて選択すること
- 実装概要は具体的な技術スタックを含めること

# 実装案生成ルール

## 要件分析ルール
- 機能要件の整理
  - 必須機能の明確な定義
  - オプション機能の優先順位付け
  - 将来の拡張性の考慮
- 非機能要件の整理
  - パフォーマンス要件の定量化
  - セキュリティ要件の明確化
  - スケーラビリティ要件の定義
- 制約条件の確認
  - 技術的制約の洗い出し
  - ビジネス制約の確認
  - リソース制約の把握
- 優先度の考慮
  - ビジネス価値の評価
  - 技術的複雑さの見積もり
  - リスク要因の特定

## 全体設計ルール
- アーキテクチャ設計
  - システム構成図
    - コンポーネント間の関係
    - データフロー
    - 外部システム連携
  - コンポーネント図
    - 主要モジュールの特定
    - モジュール間の依存関係
    - インターフェースの概要
  - デプロイメント図
    - インフラ構成の概要
    - スケーリング戦略
    - 冗長化設計

- データベース設計（概念レベル）
  - ER図
    - 主要エンティティの特定
    - エンティティ間の関連
    - カーディナリティ
  - テーブル設計の概要
    - 主要テーブルの特定
    - テーブル間の関連
    - データの流れ
  - インデックス戦略の概要
    - 主要な検索パターン
    - パフォーマンス要件
    - スケーリング考慮事項

- API設計（概要レベル）
  - エンドポイント設計の概要
    - 主要なリソース
    - 基本的な操作
    - バージョニング方針
  - 認証・認可の基本方針
    - 認証方式の選択
    - 認可モデルの概要
    - セキュリティ要件
  - エラーハンドリングの方針
    - エラーコード体系
    - エラーレスポンス形式
    - ログ戦略

- セキュリティ設計（概要レベル）
  - 認証方式
    - 認証フローの概要
    - セッション管理方針
    - パスワードポリシー
  - データ保護
    - 暗号化方針
    - データマスキング
    - バックアップ戦略
  - アクセス制御
    - 権限モデルの概要
    - 監査ログの方針
    - セキュリティ監視

- パフォーマンス設計（概要レベル）
  - キャッシュ戦略
    - キャッシュレベル
    - キャッシュポリシー
    - キャッシュ無効化
  - スケーリング戦略
    - 水平スケーリング
    - 垂直スケーリング
    - 自動スケーリング
  - 負荷分散
    - ロードバランシング
    - セッション管理
    - フェイルオーバー

## 実装案提示ルール
- 案1: シンプルな実装
  - 最小限の機能実装
    - コア機能の特定
    - 必須機能の実装
    - シンプルな設計
  - 基本的なアーキテクチャ
    - 標準的な構成
    - 最小限の依存関係
    - シンプルなデプロイ
  - 短期的な開発期間
    - 迅速な実装
    - 最小限のテスト
    - 早期リリース

- 案2: 拡張性を重視した実装
  - モジュール化された設計
    - コンポーネント分割
    - インターフェース定義
    - 疎結合設計
  - 柔軟なアーキテクチャ
    - プラグイン可能な設計
    - 設定可能な機能
    - 拡張ポイント
  - 中期的な開発期間
    - 段階的な実装
    - 継続的な改善
    - 定期的なリリース

- 案3: 将来性を考慮した実装
  - 高度な機能実装
    - 先進的な機能
    - 自動化
    - インテリジェント機能
  - スケーラブルなアーキテクチャ
    - マイクロサービス
    - イベント駆動
    - 分散システム
  - 長期的な開発期間
    - 段階的な展開
    - 継続的な最適化
    - 長期的なメンテナンス

## 評価ルール
- 工数評価
  - 開発期間
    - 実装期間
    - テスト期間
    - デプロイ期間
  - 必要なリソース
    - 開発者数
    - インフラリソース
    - 外部サービス
  - コスト見積もり
    - 人件費
    - インフラコスト
    - ライセンス費用

- 拡張性評価
  - 機能追加の容易さ
    - モジュール性
    - プラグイン性
    - 設定の柔軟性
  - スケーラビリティ
    - 水平スケーリング
    - 垂直スケーリング
    - パフォーマンス
  - 保守性
    - コード品質
    - ドキュメント
    - テスト容易性

- 保守性評価
  - コードの可読性
    - 命名規則
    - コメント
    - 構造化
  - テスト容易性
    - 単体テスト
    - 統合テスト
    - 自動化
  - デバッグ容易性
    - ログ
    - トレース
    - エラーハンドリング

- メリット・デメリット分析
  - 技術的観点
    - 実装の複雑さ
    - 技術的負債
    - 将来性
  - ビジネス観点
    - コスト
    - タイムマーケット
    - 競争優位性
  - 運用観点
    - 運用コスト
    - メンテナンス性
    - 安定性

- リスク評価
  - 技術的リスク
    - 実装リスク
    - パフォーマンスリスク
    - セキュリティリスク
  - ビジネスリスク
    - コストリスク
    - スケジュールリスク
    - 市場リスク
  - 運用リスク
    - 運用負荷
    - 障害リスク
    - 拡張リスク

- 技術的負債評価
  - 短期的な負債
    - 即時対応が必要な問題
    - 一時的な回避策
    - 緊急の修正
  - 長期的な負債
    - 将来の改善が必要な問題
    - 設計上の制約
    - 技術的制約
  - 対策コスト
    - 修正コスト
    - 改善コスト
    - 移行コスト

## おすすめ案提示ルール
- 選択理由
  - 技術的妥当性
    - 実装の確実性
    - 技術的成熟度
    - 将来性
  - ビジネス適合性
    - コスト効率
    - タイムマーケット
    - 競争優位性
  - リスク評価
    - リスクレベル
    - 対策の確実性
    - 許容範囲

- 実装概要
  - アーキテクチャ概要
    - システム構成
    - コンポーネント
    - データフロー
  - 主要コンポーネント
    - コア機能
    - 重要モジュール
    - 外部連携
  - 開発フェーズ
    - フェーズ分割
    - マイルストーン
    - リリース計画

- 想定される課題
  - 技術的課題
    - 実装の難易度
    - パフォーマンス
    - セキュリティ
  - ビジネス課題
    - コスト管理
    - スケジュール
    - リソース
  - 運用課題
    - 運用負荷
    - メンテナンス
    - サポート

- リスク対策
  - 予防策
    - リスク回避
    - リスク軽減
    - 早期検知
  - 対応策
    - インシデント対応
    - 復旧手順
    - 代替手段
  - モニタリング
    - 監視項目
    - アラート設定
    - レポート

- 代替案の検討
  - フォールバック案
    - 緊急時の対応
    - 代替機能
    - 移行手順
  - 段階的実装
    - フェーズ分割
    - 優先順位
    - リリース計画
  - 移行戦略
    - 移行手順
    - データ移行
    - ユーザー移行
