---
description: 
globs: 
alwaysApply: false
---
# レビューフェーズルール

## 1. コード品質評価ルール
- 静的解析
  - PHPStanによる型チェック
    - 厳格な型チェックの実施
    - 型の不一致の検出
    - 未定義の変数・メソッドの検出
  - PHP_CodeSnifferによるコーディング規約チェック
    - PSR-12規約の遵守
    - 命名規則の確認
    - コードスタイルの統一
  - 複雑度メトリクス
    - 循環的複雑度の確認
    - メソッドの長さ
    - クラスの凝集度

- テストカバレッジ
  - 単体テスト
    - メソッドのカバレッジ
    - 分岐のカバレッジ
    - エッジケースのテスト
  - 統合テスト
    - コンポーネント間の結合テスト
    - データベース操作のテスト
    - 外部サービス連携のテスト
  - E2Eテスト
    - mablテストの必要性の判断

- パフォーマンス
  - クエリ実行時間
    - N+1問題の確認
    - インデックスの使用状況
    - クエリの最適化
  - メモリ使用量
    - メモリリークの確認
    - キャッシュの使用状況
    - リソースの解放
  - レスポンス時間
    - APIの応答時間
    - ページロード時間
    - バックグラウンド処理の時間

## 2. アーキテクチャ評価ルール
- 設計原則の遵守
  - SOLID原則
    - 単一責任の原則
    - 開放閉鎖の原則
    - リスコフの置換原則
    - インターフェース分離の原則
    - 依存性逆転の原則
  - DRY原則
    - コードの重複
    - ロジックの再利用
    - 共通化の適切性
  - KISS原則
    - シンプルな設計
    - 過度な抽象化の回避
    - 理解しやすさ

- 依存関係の管理
  - モジュール間の依存
    - 循環依存の確認
    - 依存の方向性
    - 結合度の評価
  - 外部ライブラリ
    - バージョン管理
    - セキュリティ評価
    - メンテナンス性
  - 設定管理
    - 環境依存の分離
    - シークレット管理
    - 設定の検証

- モジュール性
  - 責務の分離
    - ドメインロジック
    - インフラストラクチャ
    - アプリケーションサービス
  - インターフェース設計
    - 抽象化の適切性
    - 拡張性の確保
    - テスト容易性
  - コンポーネント設計
    - 凝集度
    - 結合度
    - 再利用性

## 3. セキュリティ評価ルール
- 脆弱性チェック
  - SQLインジェクション
    - プリペアドステートメント
    - パラメータバインディング
    - 入力値の検証
  - XSS対策
    - 出力エスケープ
    - Content Security Policy
    - 入力値のサニタイズ
  - CSRF対策
    - トークン検証
    - SameSite属性
    - 二重送信防止

- データ保護
  - 暗号化
    - 機密データの暗号化
    - 鍵管理
    - アルゴリズムの選択
  - アクセス制御
    - 認証の実装
    - 認可の実装
    - セッション管理
  - ログ管理
    - 監査ログ
    - エラーログ
    - アクセスログ

- セキュリティ設定
  - HTTPヘッダー
    - セキュリティヘッダー
    - CORS設定
    - キャッシュ制御
  - エラーハンドリング
    - エラーメッセージ
    - スタックトレース
    - デバッグ情報
  - セッション管理
    - セッションタイムアウト
    - セッション固定化対策
    - セッションストレージ

## 4. ドキュメント評価ルール
- コードコメント
  - クラス・メソッドの説明
    - 目的の説明
    - パラメータの説明
    - 戻り値の説明
  - 複雑なロジックの説明
    - アルゴリズムの説明
    - ビジネスルールの説明
    - 注意点の説明
  - TODOコメント
    - 改善点の記録
    - 技術的負債の記録
    - 将来の拡張点

- APIドキュメント
  - エンドポイントの説明
    - リソースの説明
    - パラメータの説明
    - レスポンスの説明
  - 認証・認可の説明
    - 認証方法の説明
    - 権限の説明
    - トークンの説明
  - エラーレスポンス
    - エラーコードの説明
    - エラーメッセージの説明
    - 対処方法の説明

- 技術ドキュメント
  - アーキテクチャ図
    - システム構成図
    - コンポーネント図
    - シーケンス図
  - データベース設計
    - ER図
    - テーブル定義
    - インデックス設計
  - デプロイメント
    - 環境構成
    - 設定項目
    - 運用手順

## 5. 改善提案ルール
- 必須修正
  - セキュリティ問題
    - 脆弱性の修正
    - データ漏洩の防止
    - アクセス制御の強化
  - バグ修正
    - 機能の不具合
    - エラーハンドリング
    - エッジケース
  - パフォーマンス問題
    - ボトルネック
    - リソース使用
    - 応答時間

- 推奨修正
  - コード品質
    - 可読性の向上
    - 保守性の向上
    - テスト容易性
  - アーキテクチャ
    - 設計の改善
    - 依存関係の整理
    - モジュール化
  - ドキュメント
    - コメントの追加
    - ドキュメントの更新
    - 説明の充実

- 任意修正
  - リファクタリング
    - コードの整理
    - 命名の改善
    - 構造の改善
  - 最適化
    - パフォーマンス改善
    - リソース使用の最適化
    - キャッシュの活用
  - 機能拡張
    - 新機能の追加
    - 既存機能の拡張
    - ユーザビリティの向上

## 6. スコアリングルール
- 評価基準
  - コード品質
    - 静的解析結果
    - テストカバレッジ
    - パフォーマンス
  - アーキテクチャ
    - 設計原則の遵守
    - 依存関係の管理
    - モジュール性
  - セキュリティ
    - 脆弱性の有無
    - データ保護
    - セキュリティ設定
  - ドキュメント
    - コードコメント
    - APIドキュメント
    - 技術ドキュメント

- スコア計算
  - 必須項目
    - セキュリティ: 30点
    - バグ: 20点
    - パフォーマンス: 20点
  - 推奨項目
    - コード品質: 10点
    - アーキテクチャ: 10点
    - ドキュメント: 10点
  - 合計点
    - 90点以上: 優
    - 80点以上: 良
    - 70点以上: 可
    - 70点未満: 不可

- フィードバック
  - 改善点
    - 必須修正の説明
    - 推奨修正の説明
    - 任意修正の説明
  - ベストプラクティス
    - 良い実装の例
    - 参考になるパターン
    - 学習リソース
  - フォローアップ
    - 修正の確認
    - 追加レビュー
    - 継続的な改善
